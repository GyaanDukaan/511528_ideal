#include <iostream>
#include <type_traits>
#include <chrono>
#include <concepts>

void process(const std::integral auto& value) {
    // Simulate some processing logic for integral types
    for (int i = 0; i < 10000; ++i) {}
}

void process(const std::floating_point auto& value) {
    // Simulate some processing logic for floating-point types
    for (int i = 0; i < 10000; ++i){}
}

void benchmark_cpp23() {
    auto start = std::chrono::high_resolution_clock::now();

        for (int i = 0; i < 1000000; ++i) {
            process(i); // integral
                process(3.14); // floating point
        }

    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> elapsed = end - start;
    std::cout << "C++23 benchmark time: " << elapsed.count() << " seconds\n";
}


void benchmark_legacy() {
    auto start = std::chrono::high_resolution_clock::now();

    for (int i = 0; i < 1000000; ++i) {
        process(i); // integral
        process(3.14); // floating point
    }

    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> elapsed = end - start;
    std::cout << "Legacy benchmark time: " << elapsed.count() << " seconds\n";
}


int main() {

    std::cout << "Running C++23 Code Benchmark...\n";
    benchmark_cpp23();

    return 0;
}
